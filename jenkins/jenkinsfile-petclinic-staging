pipeline {
    agent any
    environment {
        APP_NAME="petclinic"
        APP_REPO_NAME="${APP_NAME}-app-staging"
        PROJECT_ID = 'k8s-demo-464210'
        LOCATION="europe-west3"
        HELM_CHART_REPO_NAME="${APP_NAME}-helm-charts-staging"
        ARTIFACT_REGISTRY="${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${APP_REPO_NAME}"
        CREDENTIALS_ID = 'gcp-k8s-token'
        RANCHER_URL="https://34.40.38.116/"
        RANCHER_CONTEXT="c-9ql97:p-v7gl2" 
        CLUSTERID="c-9ql97"
        RANCHER_CREDS=credentials('rancher-petclinic-credentials')
    }

    stages {

        stage('Create GCP Artifact Repo') {
            steps {
                echo "Creating GCP Artifact Repo for ${APP_NAME} app"
                
                // Service Account kimliÄŸiyle gcloud'a login ol
                withCredentials([file(credentialsId: "${CREDENTIALS_ID}", variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                sh '''
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    gcloud config set project ${PROJECT_ID}

                    gcloud artifacts repositories describe ${APP_REPO_NAME} --location=${LOCATION} > /dev/null 2>&1 \
                                && echo "Artifact Repo '${APP_REPO_NAME}' already exists." \
                                || (echo "Creating Artifact Repo '${APP_REPO_NAME}'..." && \
                                gcloud artifacts repositories create ${APP_REPO_NAME} \
                                --repository-format=docker \
                                --location="${LOCATION}" \
                                --description="GCP Repo for petclinic app" \
                                --immutable-tags \
                                --async \
                                --disable-vulnerability-scanning)
                    
                    gcloud artifacts repositories describe ${HELM_CHART_REPO_NAME} --location=${LOCATION} > /dev/null 2>&1 \
                                && echo "Artifact Repo '${HELM_CHART_REPO_NAME}' already exists." \
                                || (echo "Creating Artifact Repo '${HELM_CHART_REPO_NAME}'..." && \
                                gcloud artifacts repositories create ${HELM_CHART_REPO_NAME} \
                                --repository-format=docker \
                                --location="${LOCATION}" \
                                --description="Helm Chart Repo for petclinic app" \
                                --immutable-tags \
                                --async \
                                --disable-vulnerability-scanning)
                '''
                }
            }
        }

        stage('Package Application') {
            steps {
                echo 'Packaging the app into jars with maven'
                sh ". ./jenkins/package-with-maven-container.sh"
            }
        }
        stage('Prepare Tags for Docker Images') {
            steps {
                echo 'Preparing Tags for Docker Images'
                script {
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-admin-server/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_ADMIN_SERVER="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:admin-server-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-api-gateway/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_API_GATEWAY="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:api-gateway-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-config-server/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_CONFIG_SERVER="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:config-server-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-customers-service/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_CUSTOMERS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:customers-service-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-discovery-server/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_DISCOVERY_SERVER="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:discovery-server-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-vets-service/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_VETS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:vets-service-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-visits-service/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_VISITS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:visits-service-staging-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    env.IMAGE_TAG_GRAFANA_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:grafana-service-b${BUILD_NUMBER}"
                    env.IMAGE_TAG_PROMETHEUS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:prometheus-service-b${BUILD_NUMBER}"
                }
            }
        }
        stage('Build App Docker Images') {
            steps {
                echo 'Building App Dev Images'
                sh ". ./jenkins/build-staging-docker-images-for-ecr.sh"
                sh 'docker image ls'
            }
        }
        stage('Push Images to GCP Artifact Repo') {
            steps {
                echo "Pushing ${APP_NAME} App Images to  GCP Artifact Repo"
                sh ". ./jenkins/push-staging-docker-images-to-ecr.sh"
            }
        }

        stage('Deploy App on Kubernetes Cluster'){
            steps {
                echo 'Deploying App on Kubernetes Cluster'

                withCredentials([file(credentialsId: "${CREDENTIALS_ID}", variable: 'KUBECONFIG_FILE')]) {
                sh '''
                    rancher login --skip-verify --context $RANCHER_CONTEXT --token $RANCHER_CREDS_USR:$RANCHER_CREDS_PSW $RANCHER_URL 
                    envsubst < k8s/petclinic_chart/values-template.yaml > k8s/petclinic_chart/values.yaml
                    sed -i s/HELM_VERSION/${BUILD_NUMBER}/ k8s/petclinic_chart/Chart.yaml

                    helm package k8s/petclinic_chart
                    helm push petclinic_chart-${BUILD_NUMBER}.tgz oci://${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${HELM_CHART_REPO_NAME}

                    rancher kubectl delete secret gcp-artifact-registry -n petclinic-staging-ns || echo "there is no gcp-artifact-registry secret in petclinic-staging-ns namespace"

                    rancher kubectl create secret docker-registry gcp-artifact-registry -n petclinic-staging-ns \
                        --docker-server=${LOCATION}-docker.pkg.dev \
                        --docker-username=_json_key \
                        --docker-password="$(cat $KUBECONFIG_FILE)" \
                        --docker-email=usul.adem@gmail.com

                    rm -f k8s/config
                    rancher cluster kf $CLUSTERID > k8s/config
                    chmod 400 k8s/config

                    #Install Ingress Controller in Kubernetes Cluster on GKE
                    rancher kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.3/deploy/static/provider/cloud/deploy.yaml
                    sleep 60
                    rancher kubectl get pods --namespace=ingress-nginx
                    

                    helm upgrade --install \
                        petclinic-app-release oci://${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${HELM_CHART_REPO_NAME}/petclinic_chart \
                        --version ${BUILD_NUMBER} --namespace petclinic-staging-ns --kubeconfig k8s/config
                    
                    sleep 90
                    rancher kubectl get ingress -n petclinic-staging-ns -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' | xargs -I {} echo http://{}
                '''
                }
            }
        }
    }
    post {
        always {
            script {
                timeout(time: 2, unit: 'HOURS') {
                    input message: 'Deploy to production?'
                }
                echo 'Deleting all local images'
                sh 'docker image prune -af'              
            }
        }
    }
}