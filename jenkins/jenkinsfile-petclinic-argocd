pipeline {
    agent any
    environment {
        APP_NAME="petclinic"
        APP_REPO_NAME="${APP_NAME}-app-argocd"
        PROJECT_ID = 'k8s-demo-464210'
        LOCATION="us-east1"
        ARTIFACT_REGISTRY="${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${APP_REPO_NAME}"
        CREDENTIALS_ID = 'gcp-k8s-token'
        GIT_CREDENTIALS_ID ='chart-git-creds-id'
    }

    stages {

        stage('Create GCP Artifact Repo') {
            steps {
                echo "Creating GCP Artifact Repo for ${APP_NAME} app"
                
                // Service Account kimliÄŸiyle gcloud'a login ol
                withCredentials([file(credentialsId: "${CREDENTIALS_ID}", variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                sh '''
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    gcloud config set project ${PROJECT_ID}

                    gcloud artifacts repositories describe ${APP_REPO_NAME} --location=${LOCATION} > /dev/null 2>&1 \
                                && echo "Artifact Repo '${APP_REPO_NAME}' already exists." \
                                || (echo "Creating Artifact Repo '${APP_REPO_NAME}'..." && \
                                gcloud artifacts repositories create ${APP_REPO_NAME} \
                                --repository-format=docker \
                                --location="${LOCATION}" \
                                --description="GCP Repo for petclinic app" \
                                --immutable-tags \
                                --async \
                                --disable-vulnerability-scanning)
                    
                '''
                }
            }
        }

        stage('Package Application') {
            steps {
                echo 'Packaging the app into jars with maven'
                sh ". ./jenkins/package-with-maven-container.sh"
            }
        }
        stage('Prepare Tags for Docker Images') {
            steps {
                echo 'Preparing Tags for Docker Images'
                script {
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-admin-server/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_ADMIN_SERVER="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:admin-server-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-api-gateway/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_API_GATEWAY="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:api-gateway-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-config-server/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_CONFIG_SERVER="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:config-server-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-customers-service/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_CUSTOMERS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:customers-service-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-discovery-server/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_DISCOVERY_SERVER="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:discovery-server-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-vets-service/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_VETS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:vets-service-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    MVN_VERSION=sh(script:'. ${WORKSPACE}/spring-petclinic-visits-service/target/maven-archiver/pom.properties && echo $version', returnStdout:true).trim()
                    env.IMAGE_TAG_VISITS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:visits-service-argocd-v${MVN_VERSION}-b${BUILD_NUMBER}"
                    env.IMAGE_TAG_GRAFANA_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:grafana-service-b${BUILD_NUMBER}"
                    env.IMAGE_TAG_PROMETHEUS_SERVICE="${ARTIFACT_REGISTRY}/${APP_REPO_NAME}:prometheus-service-b${BUILD_NUMBER}"

                }
            }
        }
        stage('Build App Docker Images') {
            steps {
                echo 'Building App Dev Images'
                sh ". ./jenkins/build-argocd-docker-images-for-ecr.sh"
                sh 'docker image ls'
            }
        }
        stage('Push Images to GCP Artifact Repo') {
            steps {
                echo "Pushing ${APP_NAME} App Images to  GCP Artifact Repo"
                sh ". ./jenkins/push-argocd-docker-images-to-ecr.sh"
            }
        }
        // stage('Create GKE cluster') {
        //     steps {

        //         echo "Creating GKE cluster: ${CLUSTER_NAME} in ${LOCATION}..."

        //         withCredentials([file(credentialsId: "${CREDENTIALS_ID}", variable: 'GCP_KEY')]) {
        //         sh '''
        //             gcloud auth activate-service-account --key-file=$GCP_KEY
        //             . ./infrastructure/prod-gke-cluster/gke-cluster.sh
        //         '''
        //         }
        //     }
        // }
        // stage('Install Ingress Controller') {
        //     steps {
        //         echo "Install Ingress Controller in Kubernetes Cluster on GKE"
        //         withCredentials([file(credentialsId: "${CREDENTIALS_ID}", variable: 'KUBECONFIG_FILE')]) {
        //         sh '''
        //             gcloud auth activate-service-account --key-file=$KUBECONFIG_FILE
        //             gcloud container clusters get-credentials $CLUSTER_NAME --region ${LOCATION} --project $PROJECT_ID
        //             kubectl config current-context
        //             kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.3/deploy/static/provider/cloud/deploy.yaml
        //             sleep 60
        //             kubectl get pods --namespace=ingress-nginx
        //         '''
        //         }
        //     }
        // }

        stage('Clone Chart Repo') {
            steps {
                dir('chart-repo') {
                    git credentialsId: 'chart-git-creds-id', url: 'https://github.com/usuladams/spring-petclinic-microservices-with-kubernetes-helm.git', branch: 'main'
                }
            }
        }
        stage('Update Helm Chart values.yaml') {
            steps {
                sh """
                    envsubst < k8s/petclinic_chart/values-template.yaml > k8s/petclinic_chart/values.yaml
                    sed -i s/HELM_VERSION/${BUILD_NUMBER}/ k8s/petclinic_chart/Chart.yaml

                    cp k8s/petclinic_chart/values.yaml chart-repo/k8s/petclinic_chart/
                    cp k8s/petclinic_chart/Chart.yaml chart-repo/k8s/petclinic_chart/
                """
            }
        }

        stage('Git Commit & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${GIT_CREDENTIALS_ID}", usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    sh """
                        git config user.email "usul.adem@gmail.com"
                        git config user.name "CI Bot"
                        git add .
                        git commit -m "ci: update image tag to ${BUILD_NUMBER}"
                        git push https://${GIT_USER}:${GIT_TOKEN}@ithub.com/usuladams/spring-petclinic-microservices-with-kubernetes-helm.git HEAD:main

                    """
                }
            }
        }

    }
    post {
        always {
            script {
                timeout(time: 2, unit: 'HOURS') {
                    input message: 'Deploy to production?'
                }
                echo 'Deleting all local images'
                sh 'docker image prune -af'
                
            }
        }
    }
}
